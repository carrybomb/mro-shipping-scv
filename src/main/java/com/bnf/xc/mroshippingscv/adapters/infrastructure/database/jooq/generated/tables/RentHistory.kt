/*
 * This file is generated by jOOQ.
 */
package com.bnf.xc.mroshippingscv.adapters.infrastructure.database.jooq.generated.tables


import com.bnf.xc.mroshippingscv.adapters.infrastructure.database.jooq.generated.Public
import com.bnf.xc.mroshippingscv.adapters.infrastructure.database.jooq.generated.keys.RENT_HISTORY_PK
import com.bnf.xc.mroshippingscv.adapters.infrastructure.database.jooq.generated.keys.RENT_HISTORY__RENT_HISTORY_FK
import com.bnf.xc.mroshippingscv.adapters.infrastructure.database.jooq.generated.keys.RENT_HISTORY__RENT_HISTORY_FK_1

import java.time.LocalDate

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RentHistory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.rent_history</code>
         */
        val RENT_HISTORY: RentHistory = RentHistory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>public.rent_history.user_id_fk</code>.
     */
    val USER_ID_FK: TableField<Record, String?> = createField(DSL.name("user_id_fk"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.rent_history.book_no_fk</code>.
     */
    val BOOK_NO_FK: TableField<Record, Long?> = createField(DSL.name("book_no_fk"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.rent_history.rent_date</code>.
     */
    val RENT_DATE: TableField<Record, LocalDate?> = createField(DSL.name("rent_date"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>public.rent_history.return_date</code>.
     */
    val RETURN_DATE: TableField<Record, LocalDate?> = createField(DSL.name("return_date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.rent_history.expect_return_date</code>.
     */
    val EXPECT_RETURN_DATE: TableField<Record, LocalDate?> = createField(DSL.name("expect_return_date"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>public.rent_history.rent_no</code>.
     */
    val RENT_NO: TableField<Record, Long?> = createField(DSL.name("rent_no"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.rent_history</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.rent_history</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.rent_history</code> table reference
     */
    constructor(): this(DSL.name("rent_history"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, RENT_HISTORY, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<Record, Long?> = super.getIdentity() as Identity<Record, Long?>
    override fun getPrimaryKey(): UniqueKey<Record> = RENT_HISTORY_PK
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(RENT_HISTORY__RENT_HISTORY_FK_1, RENT_HISTORY__RENT_HISTORY_FK)

    private lateinit var _userTb: UserTb
    private lateinit var _bookTb: BookTb

    /**
     * Get the implicit join path to the <code>public.user_tb</code> table.
     */
    fun userTb(): UserTb {
        if (!this::_userTb.isInitialized)
            _userTb = UserTb(this, RENT_HISTORY__RENT_HISTORY_FK_1)

        return _userTb;
    }

    /**
     * Get the implicit join path to the <code>public.book_tb</code> table.
     */
    fun bookTb(): BookTb {
        if (!this::_bookTb.isInitialized)
            _bookTb = BookTb(this, RENT_HISTORY__RENT_HISTORY_FK)

        return _bookTb;
    }
    override fun `as`(alias: String): RentHistory = RentHistory(DSL.name(alias), this)
    override fun `as`(alias: Name): RentHistory = RentHistory(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RentHistory = RentHistory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RentHistory = RentHistory(name, null)
}
