/*
 * This file is generated by jOOQ.
 */
package com.bnf.xc.mroshippingscv.adapters.infrastructure.database.jooq.generated.tables


import com.bnf.xc.mroshippingscv.adapters.infrastructure.database.jooq.generated.Public
import com.bnf.xc.mroshippingscv.adapters.infrastructure.database.jooq.generated.keys.BOOK_TB_PK

import java.time.LocalDate
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BookTb(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.book_tb</code>
         */
        val BOOK_TB: BookTb = BookTb()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>public.book_tb.book_name</code>.
     */
    val BOOK_NAME: TableField<Record, String?> = createField(DSL.name("book_name"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.book_tb.rent_status</code>.
     */
    val RENT_STATUS: TableField<Record, Boolean?> = createField(DSL.name("rent_status"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>public.book_tb.author</code>.
     */
    val AUTHOR: TableField<Record, String?> = createField(DSL.name("author"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.book_tb.create_date</code>.
     */
    val CREATE_DATE: TableField<Record, LocalDate?> = createField(DSL.name("create_date"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>public.book_tb.purchase_date</code>.
     */
    val PURCHASE_DATE: TableField<Record, LocalDateTime?> = createField(DSL.name("purchase_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.book_tb.book_no</code>.
     */
    val BOOK_NO: TableField<Record, Long?> = createField(DSL.name("book_no"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.book_tb.exist</code>.
     */
    val EXIST: TableField<Record, Boolean?> = createField(DSL.name("exist"), SQLDataType.BOOLEAN.defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>public.book_tb.update_date</code>.
     */
    val UPDATE_DATE: TableField<Record, LocalDateTime?> = createField(DSL.name("update_date"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.book_tb.book_rank</code>.
     */
    val BOOK_RANK: TableField<Record, String?> = createField(DSL.name("book_rank"), SQLDataType.VARCHAR.defaultValue(DSL.field("'NEWBIE'::character varying", SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.book_tb</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.book_tb</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.book_tb</code> table reference
     */
    constructor(): this(DSL.name("book_tb"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, BOOK_TB, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<Record, Long?> = super.getIdentity() as Identity<Record, Long?>
    override fun getPrimaryKey(): UniqueKey<Record> = BOOK_TB_PK
    override fun `as`(alias: String): BookTb = BookTb(DSL.name(alias), this)
    override fun `as`(alias: Name): BookTb = BookTb(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BookTb = BookTb(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BookTb = BookTb(name, null)
}
