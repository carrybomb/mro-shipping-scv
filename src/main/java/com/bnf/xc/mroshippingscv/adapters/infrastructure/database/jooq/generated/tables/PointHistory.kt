/*
 * This file is generated by jOOQ.
 */
package com.bnf.xc.mroshippingscv.adapters.infrastructure.database.jooq.generated.tables


import com.bnf.xc.mroshippingscv.adapters.infrastructure.database.jooq.generated.Public
import com.bnf.xc.mroshippingscv.adapters.infrastructure.database.jooq.generated.keys.POINT_HISTORY__POINT_LIST_TB_FK

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PointHistory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.point_history</code>
         */
        val POINT_HISTORY: PointHistory = PointHistory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>public.point_history.user_id_fk</code>. 유저 아이디 외래키
     */
    val USER_ID_FK: TableField<Record, String?> = createField(DSL.name("user_id_fk"), SQLDataType.VARCHAR.nullable(false), this, "유저 아이디 외래키")

    /**
     * The column <code>public.point_history.variable_point</code>. 변동포인트
     */
    val VARIABLE_POINT: TableField<Record, Long?> = createField(DSL.name("variable_point"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "변동포인트")

    /**
     * The column <code>public.point_history.cumulative_point</code>. 누적포인트
     */
    val CUMULATIVE_POINT: TableField<Record, Long?> = createField(DSL.name("cumulative_point"), SQLDataType.BIGINT, this, "누적포인트")

    /**
     * The column <code>public.point_history.change_date</code>. 변동시간
     */
    val CHANGE_DATE: TableField<Record, LocalDateTime?> = createField(DSL.name("change_date"), SQLDataType.LOCALDATETIME(6), this, "변동시간")

    /**
     * The column <code>public.point_history.point_no</code>.
     */
    val POINT_NO: TableField<Record, Long?> = createField(DSL.name("point_no"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.point_history</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.point_history</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.point_history</code> table reference
     */
    constructor(): this(DSL.name("point_history"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, POINT_HISTORY, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<Record, Long?> = super.getIdentity() as Identity<Record, Long?>
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(POINT_HISTORY__POINT_LIST_TB_FK)

    private lateinit var _userTb: UserTb

    /**
     * Get the implicit join path to the <code>public.user_tb</code> table.
     */
    fun userTb(): UserTb {
        if (!this::_userTb.isInitialized)
            _userTb = UserTb(this, POINT_HISTORY__POINT_LIST_TB_FK)

        return _userTb;
    }
    override fun `as`(alias: String): PointHistory = PointHistory(DSL.name(alias), this)
    override fun `as`(alias: Name): PointHistory = PointHistory(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PointHistory = PointHistory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PointHistory = PointHistory(name, null)
}
