/*
 * This file is generated by jOOQ.
 */
package com.bnf.xc.mroshippingscv.adapters.infrastructure.database.jooq.generated.tables


import com.bnf.xc.mroshippingscv.adapters.infrastructure.database.jooq.generated.Public
import com.bnf.xc.mroshippingscv.adapters.infrastructure.database.jooq.generated.keys.USER_TB_PK

import java.time.LocalDate
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserTb(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.user_tb</code>
         */
        val USER_TB: UserTb = UserTb()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>public.user_tb.user_name</code>.
     */
    val USER_NAME: TableField<Record, String?> = createField(DSL.name("user_name"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.user_tb.user_tel</code>.
     */
    val USER_TEL: TableField<Record, String?> = createField(DSL.name("user_tel"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.user_tb.user_birth</code>.
     */
    val USER_BIRTH: TableField<Record, LocalDate?> = createField(DSL.name("user_birth"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>public.user_tb.user_rank</code>.
     */
    val USER_RANK: TableField<Record, String?> = createField(DSL.name("user_rank"), SQLDataType.VARCHAR.defaultValue(DSL.field("'newbie'::character varying", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>public.user_tb.user_id</code>.
     */
    val USER_ID: TableField<Record, String?> = createField(DSL.name("user_id"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.user_tb.user_pw</code>.
     */
    val USER_PW: TableField<Record, String?> = createField(DSL.name("user_pw"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.user_tb.user_point</code>.
     */
    val USER_POINT: TableField<Record, Long?> = createField(DSL.name("user_point"), SQLDataType.BIGINT.defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>public.user_tb.user_create_date</code>.
     */
    val USER_CREATE_DATE: TableField<Record, LocalDateTime?> = createField(DSL.name("user_create_date"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.user_tb.user_update_date</code>.
     */
    val USER_UPDATE_DATE: TableField<Record, LocalDateTime?> = createField(DSL.name("user_update_date"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.user_tb.user_qualification</code>.
     */
    val USER_QUALIFICATION: TableField<Record, Boolean?> = createField(DSL.name("user_qualification"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>public.user_tb.user_rent_count</code>.
     */
    val USER_RENT_COUNT: TableField<Record, Int?> = createField(DSL.name("user_rent_count"), SQLDataType.INTEGER.defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.user_tb</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.user_tb</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.user_tb</code> table reference
     */
    constructor(): this(DSL.name("user_tb"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, USER_TB, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<Record> = USER_TB_PK
    override fun `as`(alias: String): UserTb = UserTb(DSL.name(alias), this)
    override fun `as`(alias: Name): UserTb = UserTb(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UserTb = UserTb(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UserTb = UserTb(name, null)
}
